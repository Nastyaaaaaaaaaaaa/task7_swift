Статья объясняет, как работают списки захвата (capture lists) в Swift при использовании замыканий (closures) и разницу между сильными (strong), слабыми (weak) и безвладельческими (unowned) ссылками.

1. Сильное (strong) захватывание – по умолчанию Swift сохраняет объекты, используемые внутри замыкания, не давая им удалиться, что может привести к утечкам памяти.
2. Слабое (weak) захватывание – объект может быть удалён, поэтому его нужно использовать через optional (taylor?.playSong()).
3. Безвладельческое (unowned) захватывание – похоже на weak, но без optional. Используется, когда точно знаем, что объект не будет уничтожен до вызова замыкания (иначе приложение упадёт).
4. Проблемы, которые могут возникнуть:

- Циклы сильных ссылок (retain cycles) – объекты ссылаются друг на друга, из-за чего не удаляются. Решается weak.
- Ошибка с unowned – если объект исчезнет, а замыкание попробует его использовать, программа сломается.
- Неявное использование self – Swift требует явно указывать self в замыканиях, чтобы избежать неожиданных ссылок.
- Копирование замыканий – они могут разделять одни и те же захваченные данные, что иногда ведёт к неожиданным результатам.

Как правильно выбирать между strong, weak и unowned?

- Используем unowned, если точно уверены, что объект не удалится до вызова замыкания.
- Используем weak, если есть риск, что объект исчезнет, особенно при циклах ссылок.
- Используем strong, если нет риска утечек памяти (например, для анимаций).